// Generated by CoffeeScript 1.10.0

/**
 * RDDatePicker
 * @license MIT License
 */

(function() {
  (function($, document, window) {

    /**
     * Initial flags
     * @public
     */
    var RDDatePicker, isMobile;
    isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

    /**
     * Creates a datepicker.
     * @class RDDatePicker.
     * @public
     * @param {HTMLElement} element - The element to create the datepicker for.
     * @param {Object} [options] - The options
     */
    RDDatePicker = (function() {

      /**
       * Default options for datepicker.
       * @public
       */
      RDDatePicker.prototype.Defaults = {
        mobile: false,
        days: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        format: "mm-dd-yyyy",
        prevClass: "rd-datepicker-prev fa-angle-left",
        nextClass: "rd-datepicker-next fa-angle-right",
        prevText: "",
        nextText: "",
        callbacks: null
      };

      function RDDatePicker(element, options) {
        this.options = $.extend(true, {}, this.Defaults, options);
        this.$element = $(element);
        this.$picker = null;
        this.$win = $(window);
        this.$doc = $(document);
        if (isMobile) {
          if (this.options.mobile) {
            this.initialize();
          }
        } else {
          this.initialize();
        }
      }


      /**
       * Initializes the Parallax.
       * @protected
       */

      RDDatePicker.prototype.initialize = function() {
        var type;
        if (type = this.$element.attr('type')) {
          if (type === 'date') {
            this.$element.attr('type', 'text');
          }
        }
        this.createPickerDOM().applyHandlers();
        return this;
      };

      RDDatePicker.prototype.createPickerDOM = function() {
        var ctx;
        ctx = this;
        ctx.$picker = $('<div/>', {
          'class': 'rd-datepicker'
        }).data('date', new Date()).append("<div class='rd-datepicker-header'> <span class='" + ctx.options.prevClass + "'>" + ctx.options.prevText + "</span> <span class='" + ctx.options.nextClass + "'>" + ctx.options.nextText + "</span> <div class='rd-datepicker-title'></div> </div><div class='rd-datepicker-body'></div>");
        ctx.$element.after(ctx.$picker);
        ctx.refresh();
        return this;
      };

      RDDatePicker.prototype.applyHandlers = function() {
        var ctx;
        ctx = this;
        ctx.$element.on('focus', $.proxy(ctx.open, ctx));
        ctx.$element.on('input change propertychange', $.proxy(ctx.open, ctx));
        ctx.$doc.find('*').on('focus', function(e) {
          var target;
          target = e.target;
          if (target !== ctx.$element[0] && target !== ctx.$picker[0] && !$(target).parents('.rd-datepicker').length) {
            return $.proxy(ctx.close, ctx)();
          }
        });
        ctx.$picker.on('click', '.rd-datepicker-day', ctx, ctx.pick);
        ctx.$picker.on('click', '.rd-datepicker-next', $.proxy(ctx.next, ctx));
        ctx.$picker.on('click', '.rd-datepicker-prev', $.proxy(ctx.prev, ctx));
        ctx.$doc.on('click', function(e) {
          var target;
          target = e.target;
          if (target !== ctx.$element[0] && target !== ctx.$picker[0] && !$(target).parents('.rd-datepicker').length) {
            return $.proxy(ctx.close, ctx)();
          }
        });
        return ctx;
      };

      RDDatePicker.prototype.next = function() {
        var date;
        date = this.$picker.data('date');
        if (date.getMonth() === 11) {
          date = new Date(date.getFullYear() + 1, 0, 1);
        } else {
          date = new Date(date.getFullYear(), date.getMonth() + 1, 1);
        }
        this.$picker.data('date', date);
        this.refresh();
        return this;
      };

      RDDatePicker.prototype.prev = function() {
        var date;
        date = this.$picker.data('date');
        if (date.getMonth() === 0) {
          date = new Date(date.getFullYear() - 1, 11, 1);
        } else {
          date = new Date(date.getFullYear(), date.getMonth() - 1, 1);
        }
        this.$picker.data('date', date);
        return this.refresh();
      };

      RDDatePicker.prototype.open = function() {
        this.$picker.addClass('rd-datepicker-open');
        return this;
      };

      RDDatePicker.prototype.close = function(e) {
        this.$picker.removeClass('rd-datepicker-open');
        return this;
      };

      RDDatePicker.prototype.pick = function(e) {
        var $day, ctx, dayDate;
        ctx = e.data;
        $day = $(this).addClass('selected');
        dayDate = $day.data('date');
        ctx.$picker.data('pickedDate', dayDate).find('.rd-datepicker-day').not(this).removeClass('selected');
        ctx.$element.val(dayDate.format(ctx.options.format));
        ctx.$element.focus();
        setTimeout($.proxy(ctx.close, ctx));
        return this;
      };

      RDDatePicker.prototype.refresh = function() {
        var $calendar, $week, counter, date, day, dayClass, dayDate, dayText, firstDay, i, j, k, l, len, m, monthLength, pickedDate, prevMonthLength, ref, today;
        date = this.$picker.data("date");
        today = new Date();
        pickedDate = this.$picker.data("pickedDate");
        monthLength = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
        prevMonthLength = new Date(date.getFullYear(), date.getMonth(), 0).getDate();
        firstDay = new Date(date.getFullYear(), date.getMonth(), 1).getDay();
        counter = 1;
        today.setHours(0);
        today.setMinutes(0);
        today.setSeconds(0);
        today.setMilliseconds(0);
        $calendar = $("<table>");
        $week = $("<tr/>");
        ref = this.options.days;
        for (k = 0, len = ref.length; k < len; k++) {
          day = ref[k];
          $week.append("<th class='rd-datepicker-week'>" + day + "</th>");
        }
        $calendar.append($week);
        for (i = l = 0; l <= 6; i = ++l) {
          $week = $('<tr/>');
          for (j = m = 0; m <= 6; j = ++m) {
            day = 7 * i + j + 1;
            dayClass = 'rd-datepicker-day';
            if (j === 0 && day > monthLength + firstDay) {
              break;
            }
            if (day - firstDay < 1) {
              dayText = prevMonthLength + day - firstDay;
              dayClass += ' offset';
              dayDate = new Date(date.getFullYear(), date.getMonth() - 1, prevMonthLength + (day - firstDay));
            } else if (day <= monthLength + firstDay) {
              dayText = day - firstDay;
              dayDate = new Date(date.getFullYear(), date.getMonth(), day - firstDay);
            } else {
              dayText = counter;
              dayClass += ' offset';
              dayDate = new Date(date.getFullYear(), date.getMonth() + 1, counter++);
            }
            if (dayDate.valueOf() === today.valueOf()) {
              dayClass += ' today';
            }
            if (pickedDate) {
              if (dayDate.valueOf() === pickedDate.valueOf()) {
                dayClass += ' selected';
              }
            }
            $week.append($('<td/>', {
              'class': dayClass,
              'text': dayText
            }).data('date', dayDate));
          }
          if ($week.html() !== '') {
            $calendar.append($week);
          }
        }
        this.$picker.find('.rd-datepicker-title').text(this.options.months[date.getMonth()] + " " + date.getFullYear()).end().find('.rd-datepicker-body').html($calendar);
        return this;
      };

      return RDDatePicker;

    })();

    /**
     * The jQuery Plugin for the RD Parallax
     * @public
     */
    $.fn.extend({
      RDDatePicker: function(options) {
        return this.each(function() {
          var $this;
          $this = $(this);
          if (!$this.data('RDDatePicker')) {
            return $this.data('RDDatePicker', new RDDatePicker(this, options));
          }
        });
      }
    });
    return window.RDDatePicker = RDDatePicker;
  })(window.jQuery, document, window);


  /**
   * The Plugin AMD export
   * @public
   */

  if (typeof module !== "undefined" && module !== null) {
    module.exports = window.RDDatePicker;
  } else if (typeof define === 'function' && define.amd) {
    define(["jquery"], function() {
      'use strict';
      return window.RDDatePicker;
    });
  }

}).call(this);
